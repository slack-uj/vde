#!/bin/sh 
#pkg_intro
#Copyright(C) <date> Umesh Joshi
#
#
#   Permission to use, copy, modify, and distribute this software for
#   any purpose with or without fee is hereby granted, provided that
#   the above copyright notice and this permission notice appear in all
#   copies.
#
#   THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
#   WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#   MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
#   IN NO EVENT SHALL THE AUTHORS AND COPYRIGHT HOLDERS AND THEIR
#   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
#   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
#   USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
#   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
#   OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
#   OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
#   SUCH DAMAGE
#-------------------------------------------------------------------------
#
#Slackware SlackBuild_script
#===========================
#BY:	Umesh Joshi<slackuj@gmail.com>
#FOR:	vde(virtual distributed ethernet)	
#URL:	http://vde.sourceforge.net/
#Needs:	
#ChangeLog:
#
#Run `sh vde.SlackBuild` to build a Slackware package.
#The package .txz/.tgz are created in /tmp
#Install it using `installpkg`
#
#-------------------------------------------------------------------------
#
# set inital variables

PRGNM=vde
SRCVER=${SRCVER:-2.3.2}
VERSION=$(echo $SRCVER | tr '-' '.')
BUILD=${BUILD:-1}
TAG=${TAG:-asanna}

#place to build (TMP) package (PKG) and output (OUTPUT) the program:
TMP=${TMP:-/tmp/build}
PKG=$TMP/package-$PRGNM
OUTPUT=${OUTPUT:-/tmp}
SOURCE=$TMP/source/*

#automatically detect the architecture we're building on:
if [ -z "$ARCH" ]; then
	case "$(uname -m)" in
		i?86)export ARCH=i486;;
		arm*)export ARCH=arm;;
		#unless ARCH is pre-set,use uname -m for all other archs:
		*)export ARCH=$(uname -m);;
	esac
fi
case "$ARCH" in
	i486) SLKCFLAGS="-02 -march=i486 -mtune=i686"
		SLKLDFLAGS="";LIBDIRSUFFIX=""
		;;
	i686) SLKCFLAGS="-02 -march=i486 -mtune=i686"
		SLKLDFLAGS="";LIBDIRSUFFIX=""
		;;
	x86_64) SLKCFLAGS="-02 -fPIC"
		SLKLDFLAGS="-L/usr/lib64";LIBDIRSUFFIX="64"
		;;
	*) SLKCFLAGS="-02"
		SLKLDFLAGS="";LIBDIRSUFFIX=""
		;;
esac

#exit the script on errors:
set -e
trap 'echo"$0 FAILED at line ${LINENO}"|tee $OUTPUT/error-${PRGNM}.log' ERR

#catch unitialized variables
set -u
P1=${1:-1}

#save old mask and set to 0022:
_UMASK_=$(umask)
umask 0022

##########################################  C R E A T E    W O R K I N G    D I R E C T O R I E S ########################################
mkdir -p $OUTPUT #place for the package to be saved
mkdir -p $TMP/tmp-$PRGNM #location to build the source
mkdir -p $PKG #place for the package to be built
mkdir -p $TMP/source #place for the source
rm -rf $PKG/* #always erase old package's contents
rm -rf $TMP/tmp=$PRGNM/* #remove the remnants of previous build
rm -rf $OUTPUT/{configure,make,install,error,makepkg}-$PRGNM.log #remove old log files
rm -rf $TMP/source/* #erase old source patches

#Download the source files
cd $TMP/source
wget http://downloads.sourceforge.net/${PRGNM}/${PRGNM}2-${SRCVER}.tar.bz2

#check for source file availability
if ![-f ${SOURCE}];then
	echo "source not available yet"
	echo "check your internet connection"
	echo "....Aborting the build"
	exit 1
fi
if ["$P1"=="--download"];then
	echo "Download Complete"
	exit 0
fi


####################################  P A C K A G E	B U I L D I N G ###################################################################
echo "++"
echo "--------------$PRGNM-$VERSION-----------------"
echo "++"
cd $TMP/tmp-$PRGNM
echo "extracting the source archive(s) for $PRGNM....."
tar -xvf ${SOURCE} #check the options to be supplied to your specific source file
cd *
chown -R root:root *
chmod -R u+w,go+r-w,a+x-s *
echo building...........

#set configure options
LDFLAGS="$SLKLDFLAGS"\
	CXXFLAGS="$SLKCFLAGS"\
	CFLAGS="$SLKCFLAGS"\
	./configure \
	--prefix=/usr \
	--libdir=/usr/lib${LIBDIRSUFFIX} \
	--localstatedir=/var \
	--sysconfdir=/etc \
	--mandir=/usr/man \
	--program-prefix= \
	--program-suffix= \
	--build=$ARCH-slackware-linux \
2>&1|tee $OUTPUT/configure-${PRGNM}.log
# Make these first; otherwise make won't run in parallel (thanks KB).
make config-all-devices.mak config-all-disas.mak

make $NUMJOBS 2>&1|tee $OUTPUT/make-${PRGNM}.log
make DESTDIR=$PKG install 2&1|tee $OUTPUT/install-${PRGNM}.log

#update the mime databas:
if [-x usr/bin/update-mime-database];then
	chroot ./usr/bin/update-mime-database usr/share/mime 1>/dev/null 2>&1
fi

#compress the man page(s):
if [-d $PKG/usr/man];then
	find $PKG/usr/man -type f -name "*.?" -exec gzip -9f {} \;
	for i in $(find $PKG/usr/man -type l -name "*.?");do ln -s $(readlink $i).gz $i.gz;rm $i;done
fi

#compress info pages if any
if [-d $PKG/usr/info];then
	gzip -9 $PKG/usr/info/*.info
	rm -f $PKG/usr/info/dir
fi

#strip binaries if any
find $PKG|xargs file|grep -e "executable" -e "shared object"|grep ELF\
	|cut -f 1 -d :|xargs strip --strip-unneeded 2> /dev/null ||true

#add a package description
mkdir -p $PKG/install
copy_slack_desc

#build the package
cd $PKG
makepkg --linkadd y --chown n $OUTPUT/${PRGNM}-${VERSION}-${ARCH}-${BUILD}${TAG}.tgz 2>&1|tee $OUTPUT/makepkg-${PRGNM}.log
cd $OUTPUT
md5sum ${PRGNM}-${VERSION}-${ARCH}-${BUILD}${TAG}.tgz > ${PRGNM}-${VERSION}-${ARCH}-${BUILD}${BUILD}${TAG}.tgz.md5
cd -
cat $PKG/install/slack-desc |grep "^${PRGNM} > $OUTPUT/${PRGNM}-${VERSION}-${ARCH}-${BUILD}${TAG}.txt

#restore the original umask:
umask ${_UMASK_}

